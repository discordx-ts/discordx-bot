name: Deploy

# Only trigger, when the build workflow succeeded
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed

env:
  IMAGE_NAME: bot/discordx
  KUBE_CONTAINER_NAME: discordx
  KUBE_DEPLOYMENT_NAME: discordx
  KUBE_NAMESPACE: discord

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      tag: ${{ steps.tag.outputs.name }}
    steps:
      - name: check out code ðŸ›Ž
        uses: actions/checkout@v3

      - name: check out buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Prepare Tag
        id: tag
        run: echo "name=${{ env.IMAGE_NAME }}:`date +"%y.%m.%d.%H.%M"`" >> $GITHUB_OUTPUT

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.REGISTRY_HOST }}/${{ steps.tag.outputs.name }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            Port ${SSH_PORT:-22}
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_PORT: ${{ secrets.STAGING_SSH_PORT }}

      - name: Set deployment image
        run: ssh staging 'microk8s kubectl set image deployments/${{ env.KUBE_DEPLOYMENT_NAME }} ${{ env.KUBE_CONTAINER_NAME }}=localhost:32000/${{ needs.build.outputs.tag }} -n ${{ env.KUBE_NAMESPACE }}'

  alert:
    name: Alert
    if: ${{ always() }}
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Successful
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        run: |
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"\`${{ secrets.REGISTRY_HOST }}/${{ needs.build.outputs.tag }}\` [deployed](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) successfully :tada:\"}" $DISCORD_WEBHOOK &> /dev/null
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Failed
        if: ${{ needs.build.result != 'success' || needs.deploy.result != 'success' }}
        run: |
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"\`${{ secrets.REGISTRY_HOST }}/${{ needs.build.outputs.tag }}\` [deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) failed :x:\"}" $DISCORD_WEBHOOK &> /dev/null
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
